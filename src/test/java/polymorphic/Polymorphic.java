package polymorphic;

//多态
//编译期只能调用父类里定义的方法
//多态是指，针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。
//Java的实例方法调用是基于运行时的实际类型的动态调用，而非变量的声明类型。
//这个非常重要的特性在面向对象编程中称之为多态。
//多态的特性就是，运行期才能动态决定调用的子类方法。对某个类型调用某个方法，执行的实际方法可能是某个子类的覆写方法。


//Override 的特点
//在继承关系中，子类如果定义了一个与父类方法签名完全相同的方法，被称为覆写（Override）。
//        1、覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果；
//        2、覆盖的方法的返回值必须和被覆盖的方法的返回一致；
//        3、覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类；
//        4、被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。

//Overload 的特点
////方法名相同，但各自的参数不同，称为方法重载（Overload）。
//        1、在使用重载时只能通过不同的参数样式。例如，不同的参数类型，不同的参数个数，
//          不同的参数顺序（当然，同一方法内的几个参数类型必须不一样，例如可以是fun(int,float)，但是不能为fun(int,int)）；
//        2、不能通过访问权限、返回类型、抛出的异常进行重载；
//        3、方法的异常类型和数目不会对重载造成影响；
//        4、对于继承来说，如果某一方法在父类中是访问权限是priavte，那么就不能在子类对其进行重载，
//          如果定义的话，也只是定义了一个新方法，而不会达到重载的效果。

//        override（重写，覆盖） （发生在子类与父类中）
//        1、方法名、参数、返回值相同。
//        2、子类方法不能缩小父类方法的访问权限。
//        3、子类方法不能抛出比父类方法更多的异常(但子类方法可以不抛出异常)。
//        4、存在于父类和子类之间。
//        5、方法被定义为final不能被重写。
//
//        overload（重载，过载） （发生在同一个方法中）
//        1、参数类型、个数、顺序至少有一个不相同。
//        2、不能重载只有返回值不同的方法名。
//        3、存在于父类和子类、同类中。


public class Polymorphic {
    public static void main(String[] args) {

    }
}
